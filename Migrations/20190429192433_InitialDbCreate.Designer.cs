// <auto-generated />
using System;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ArtAdvisorBackEnd.Migrations
{
    [DbContext(typeof(ArtAdvisorContext))]
    [Migration("20190429192433_InitialDbCreate")]
    partial class InitialDbCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.ArtAdvisorUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<int>("UserRole");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.ArtPiece", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AuthorId");

                    b.Property<string>("ImgUrl");

                    b.Property<Guid?>("MuseumId");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MuseumId");

                    b.HasIndex("TypeId");

                    b.ToTable("ArtPieces");
                });

            modelBuilder.Entity("Domain.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArtistName");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Description");

                    b.Property<string>("ImsgUrl");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentBody");

                    b.Property<Guid?>("MuseumId");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LanguageName");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Domain.Museum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("ImgUrl");

                    b.Property<double>("Lat");

                    b.Property<double>("Lng");

                    b.Property<string>("Name");

                    b.Property<double>("Rate");

                    b.HasKey("Id");

                    b.ToTable("Museums");
                });

            modelBuilder.Entity("Domain.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Currency");

                    b.Property<Guid?>("MuseumId");

                    b.Property<double>("total");

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("Domain.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<TimeSpan>("From");

                    b.Property<Guid?>("MuseumId");

                    b.Property<TimeSpan>("To");

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Domain.Translation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ArtPieceId");

                    b.Property<string>("Description");

                    b.Property<Guid?>("LanguageId");

                    b.Property<Guid?>("MuseumId");

                    b.HasKey("Id");

                    b.HasIndex("ArtPieceId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MuseumId");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("Domain.UserRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("UserAId");

                    b.Property<Guid?>("UserBId");

                    b.Property<int>("type");

                    b.HasKey("Id");

                    b.HasIndex("UserAId");

                    b.HasIndex("UserBId");

                    b.ToTable("UsersRelationsips");
                });

            modelBuilder.Entity("Domain.ArtPiece", b =>
                {
                    b.HasOne("Domain.Artist", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Domain.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId");

                    b.HasOne("Domain.Category", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.HasOne("Domain.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId");

                    b.HasOne("Domain.ArtAdvisorUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Price", b =>
                {
                    b.HasOne("Domain.Museum", "Museum")
                        .WithMany("Prices")
                        .HasForeignKey("MuseumId");
                });

            modelBuilder.Entity("Domain.Schedule", b =>
                {
                    b.HasOne("Domain.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId");
                });

            modelBuilder.Entity("Domain.Translation", b =>
                {
                    b.HasOne("Domain.ArtPiece", "ArtPiece")
                        .WithMany()
                        .HasForeignKey("ArtPieceId");

                    b.HasOne("Domain.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("Domain.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId");
                });

            modelBuilder.Entity("Domain.UserRelationship", b =>
                {
                    b.HasOne("Domain.ArtAdvisorUser", "UserA")
                        .WithMany()
                        .HasForeignKey("UserAId");

                    b.HasOne("Domain.ArtAdvisorUser", "UserB")
                        .WithMany()
                        .HasForeignKey("UserBId");
                });
#pragma warning restore 612, 618
        }
    }
}
